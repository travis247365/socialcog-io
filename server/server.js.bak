// Import API services
const githubService = require("./services/githubService");

// Test API connection on startup
async function initializeServices() {
  console.log("🔧 Testing API connections...");

  if (process.env.GITHUB_TOKEN) {
    const githubConnected = await githubService.testConnection();
    console.log(
      `GitHub API: ${githubConnected ? "✅ Connected" : "❌ Failed"}`
    );
  }
}

// Call this after your server starts
initializeServices();
const express = require("express");
const cors = require("cors");
const WebSocket = require("ws");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(
  cors({
    origin: "http://localhost:3000",
    credentials: true,
  })
);
app.use(express.json());

// In-memory data storage
let profiles = [];
let connections = [];
let profileIdCounter = 1;
let connectionIdCounter = 1;

// WebSocket server setup
const wss = new WebSocket.Server({ port: 3002 });

// Broadcast function
function broadcast(data) {
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      client.send(JSON.stringify(data));
    }
  });
}

// Mock data generators
function generateMockProfile(username, platform) {
  const mockData = {
    twitter: { color: "#1DA1F2", followers: 15000 },
    linkedin: { color: "#0077B5", followers: 2500 },
    github: { color: "#333333", followers: 800 },
    instagram: { color: "#E4405F", followers: 12000 },
    facebook: { color: "#4267B2", followers: 8000 },
  };

  const platformData = mockData[platform] || mockData.twitter;

  return {
    id: profileIdCounter++,
    username: username,
    platform: platform,
    followers: Math.floor(Math.random() * 50000) + platformData.followers,
    following: Math.floor(Math.random() * 2000) + 100,
    posts: Math.floor(Math.random() * 500) + 50,
    engagement_rate: (Math.random() * 0.08 + 0.02).toFixed(3),
    profile_url: `https://${platform}.com/${username}`,
    bio: `This is a mock bio for ${username} on ${platform}`,
    verified: Math.random() > 0.7,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
  };
}

function generateConnections() {
  connections = [];

  for (let i = 0; i < profiles.length; i++) {
    for (let j = i + 1; j < profiles.length; j++) {
      if (Math.random() > 0.5) {
        // 50% chance of connection
        connections.push({
          id: connectionIdCounter++,
          source_id: profiles[i].id,
          target_id: profiles[j].id,
          connection_strength: Math.random(),
          connection_type: "follows",
          created_at: new Date().toISOString(),
        });
      }
    }
  }
}

// API Routes
app.get("/api/profiles", (req, res) => {
  res.json(profiles);
});

app.post("/api/profiles", (req, res) => {
  const { username, platform } = req.body;

  if (!username || !platform) {
    return res
      .status(400)
      .json({ error: "Username and platform are required" });
  }

  // Check for duplicates
  const exists = profiles.find(
    (p) =>
      p.username.toLowerCase() === username.toLowerCase() &&
      p.platform === platform
  );

  if (exists) {
    return res.status(400).json({ error: "Profile already exists" });
  }

  // Create new profile
  const newProfile = generateMockProfile(username, platform);
  profiles.push(newProfile);

  // Regenerate connections
  generateConnections();

  // Broadcast updates
  broadcast({ type: "profile_added", profile: newProfile });
  broadcast({ type: "profiles_update", profiles });
  broadcast({ type: "connections_update", connections });

  res.json(newProfile);
});

app.get("/api/connections", (req, res) => {
  res.json(connections);
});

app.delete("/api/profiles/:id", (req, res) => {
  const id = parseInt(req.params.id);

  profiles = profiles.filter((p) => p.id !== id);
  connections = connections.filter(
    (c) => c.source_id !== id && c.target_id !== id
  );

  broadcast({ type: "profiles_update", profiles });
  broadcast({ type: "connections_update", connections });

  res.json({ message: "Profile deleted successfully" });
});

// WebSocket handling
wss.on("connection", (ws) => {
  console.log("WebSocket client connected");

  // Send current data to new client
  ws.send(JSON.stringify({ type: "profiles_update", profiles }));
  ws.send(JSON.stringify({ type: "connections_update", connections }));

  ws.on("close", () => {
    console.log("WebSocket client disconnected");
  });

  ws.on("error", (error) => {
    console.error("WebSocket error:", error);
  });
});

// Start HTTP server
app.listen(PORT, () => {
  console.log(`🚀 HTTP Server running on http://localhost:${PORT}`);
  console.log(`🔌 WebSocket Server running on ws://localhost:3002`);
  console.log(`📊 Ready to accept connections!`);
});

// Graceful shutdown
process.on("SIGTERM", () => {
  console.log("Server shutting down gracefully...");
  wss.close();
});
